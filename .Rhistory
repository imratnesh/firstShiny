.libPaths(c(.libPaths()), /home/ubuntu/anaconda3/bin/R/library)
.libPaths(c(.libPaths()), "/home/ubuntu/anaconda3/bin/R/library")
.libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
.libPaths()
mypath = .libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
mypath
.libPaths()
.libPaths()[5]
.libPaths()[4]
.libPaths()
mypath = .libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
mypath
.libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
.libPaths()
.libPaths()
.libPaths()
.libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
.libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
.libPaths()
.libPaths()
.libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
.libPaths()
.libPaths()
.libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
.libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
mypath = .libPaths(c(.libPaths(), "/home/ubuntu/anaconda3/bin/R/library"))
mypath
mypath = .libPaths(new = "/home/ubuntu/anaconda3/bin/R/library"))
mypath = .libPaths(new = "/home/ubuntu/anaconda3/bin/R/library")
mypath
.libPaths()
.libPaths()[2]
.libPaths("/home/ubuntu/anaconda3/bin/R/library", mypath[1])
.libPaths()
.libPaths()
.libPaths()
.libPaths("/home/ubuntu/anaconda3/bin/R/library")
.libPaths()
.libPaths()
.libPaths("/home/ubuntu/anaconda3/bin/R/library")
.libPaths()
.libPaths(.libPaths("/home/ubuntu/anaconda3/bin/R/library"))
.libPaths()
.libPaths(.libPaths("/home/ubuntu/anaconda3/bin/R/library"))
.libPaths()
version
shiny::runApp()
shiny::runApp()
.libPaths()
install.packages('httpuv')
install.packages('Rcpp')
install.packages('httpuv')
install.packages('shiny')
remove.packages('shiny')
remove.packages('shiny')
install.packages('shiny')
install.packages(c("sourcetools", "shiny"))
install.packages(c("sourcetools", "httpuv"))
remove.packages(httpuv)
remove.packages("httpuv")
remove.packages(httpuv)
remove.packages(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
remove.packages(shiny)
remove.packages(shiny)
remove.packages(httpuv)
remove.packages(httpuv)
remove.packages(R-cran-*)
remove.packages(R-cran*)
remove.packages(R)
remove.packages(r-cran*)
install.packages("shiny", dependencies=TRUE)
library(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
library(httpuv)
clear
install.packages('httpuv', type='binary')
install.packages('shiny', type='binary')
install.packages('httpuv', dependencies = TRUE)
install.packages('httpuv', dependencies = TRUE)
install.packages('curl', dependencies = TRUE)
install.packages('httpuv', dependencies = TRUE)
library(shiny)
library(shiny)
library(shiny)
install.packages('httpuv', dependencies = TRUE)
install.packages('httpuv', dependencies = TRUE)
library(httpuv)
library(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shiny)
install.packages('shiny', dependencies = TRUE)
library(shiny)
runApp()
install.packages('rsconnect')
install.packages('rsconnect')
install.packages('rsconnect', dependencies = TRUE)
install.packages('rsconnect', dependencies = TRUE)
install.packages('RCurl')
install.packages('RCurl', dependencies = TRUE)
install.packages('RCurl', dependencies = TRUE)
install.packages('rsconnect', dependencies = TRUE)
install.packages('rsconnect', dependencies = TRUE)
install.packages('rsconnect', dependencies = TRUE)
install.packages('rsconnect', dependencies = TRUE)
install.packages('RCurl', dependencies = TRUE)
install.packages('rsconnect', dependencies = TRUE)
library(rsconnect)
rsconnect::setAccountInfo(name='ratnesh-kushwaha', token='7F932FB475FC57FF8DE68C6EB485A976', secret='8197gQPWO0Ac0NeLf1jWdTtsnkV/iWdQJ9yszisf')
rsconnect::deployApp('~/firstshiny')
install.packages('devtools')
shiny::runApp()
runApp()
runApp('~/demoshiny')
